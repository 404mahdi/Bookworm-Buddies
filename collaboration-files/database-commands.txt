Here are all database commands. If you manipulate anything with the db, include the command here.


CREATE DATABASE bookworm_buddies;

USE bookworm_buddies;

CREATE TABLE users (
    userID INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL,
    email VARCHAR(50) NOT NULL,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    date_of_birth DATE NOT NULL
);

CREATE TABLE books (
    bookID INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(50) NOT NULL,
    author VARCHAR(50) NOT NULL,
    year_published INT NOT NULL
);


CREATE TABLE collection (
    collectionID INT AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,
    bookID INT NOT NULL,
    showcase BOOLEAN NOT NULL, 
    FOREIGN KEY (userID) REFERENCES users(userID),
    FOREIGN KEY (bookID) REFERENCES books(bookID)
);

NEW SWAP TABLE
CREATE TABLE swap (
    swapID INT AUTO_INCREMENT PRIMARY KEY,
    requesterID INT NOT NULL,              
    ownerID INT NOT NULL,                  
    bookID INT NOT NULL,                   
    desired_bookID INT DEFAULT NULL,       -- Allow NULL for optional field
    status ENUM('pending', 'accepted', 'declined', 'returned') DEFAULT 'pending',  
    message TEXT DEFAULT NULL,             
    request_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  
    FOREIGN KEY (requesterID) REFERENCES users(userID) ON DELETE CASCADE,
    FOREIGN KEY (ownerID) REFERENCES users(userID) ON DELETE CASCADE,
    FOREIGN KEY (bookID) REFERENCES books(bookID) ON DELETE CASCADE,
    FOREIGN KEY (desired_bookID) REFERENCES books(bookID) ON DELETE SET NULL
);


CREATE TABLE feedback (
    feedbackID INT AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,
    bookID INT NOT NULL,
    comment VARCHAR(500),
    reply VARCHAR(500),
    FOREIGN KEY (userID) REFERENCES users(userID),
    FOREIGN KEY (bookID) REFERENCES books(bookID)
);


ALTER TABLE collection MODIFY COLUMN showcase BOOLEAN NOT NULL DEFAULT 0;


NEW TABLE
CREATE TABLE notifications (
    notificationID INT AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,  -- ID of the user who receives the notification
    message TEXT NOT NULL,  -- Notification message
    is_read TINYINT(1) DEFAULT 0,  -- 0 for unread, 1 for read
    notification_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- When the notification was created
    FOREIGN KEY (userID) REFERENCES users(userID) ON DELETE CASCADE
);


OLD SWAP TABLE
CREATE TABLE swap (
    swapID INT AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,
    bookID INT NOT NULL,
    desired_bookID INT NOT NULL,
    FOREIGN KEY (userID) REFERENCES users(userID),
    FOREIGN KEY (bookID) REFERENCES books(bookID),
    FOREIGN KEY (desired_bookID) REFERENCES books(bookID)
);